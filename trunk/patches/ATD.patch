diff -Naur -x .git -x __pycache__ llvm-project.upstream/flang/include/flang/Optimizer/Transforms/Passes.h llvm-project/flang/include/flang/Optimizer/Transforms/Passes.h
--- llvm-project.upstream/flang/include/flang/Optimizer/Transforms/Passes.h	2023-04-20 08:24:26.847638591 -0400
+++ llvm-project/flang/include/flang/Optimizer/Transforms/Passes.h	2023-04-26 19:17:06.536865681 -0400
@@ -20,6 +20,7 @@
 class Operation;
 class Pass;
 class Region;
+class ModuleOp;
 } // namespace mlir
 
 namespace fir {
@@ -72,6 +73,8 @@
 std::unique_ptr<mlir::Pass>
 createAlgebraicSimplificationPass(const mlir::GreedyRewriteConfig &config);
 std::unique_ptr<mlir::Pass> createPolymorphicOpConversionPass();
+std::unique_ptr<mlir::OperationPass<mlir::ModuleOp>>
+createCaptureImplicitlyDeclareTargetPass();
 std::unique_ptr<mlir::Pass> createOpenACCDataOperandConversionPass();
 
 // declarative passes
diff -Naur -x .git -x __pycache__ llvm-project.upstream/flang/include/flang/Optimizer/Transforms/Passes.td llvm-project/flang/include/flang/Optimizer/Transforms/Passes.td
--- llvm-project.upstream/flang/include/flang/Optimizer/Transforms/Passes.td	2023-04-20 08:24:26.847638591 -0400
+++ llvm-project/flang/include/flang/Optimizer/Transforms/Passes.td	2023-04-26 19:17:06.536865681 -0400
@@ -286,6 +286,12 @@
   ];
 }
 
+def CaptureImplicitlyDeclareTargetPass
+    : Pass<"capture-implicitly-declare-target", "mlir::ModuleOp"> {
+  let summary = "Marks all functions referenced by a declare target function as declare target";
+  let constructor = "::fir::createCaptureImplicitlyDeclareTargetPass()";
+  let dependentDialects = ["mlir::omp::OpenMPDialect"];
+}
 def OpenACCDataOperandConversion : Pass<"fir-openacc-data-operand-conversion", "::mlir::func::FuncOp"> {
   let summary = "Convert the FIR operands in OpenACC ops to LLVM dialect";
   let dependentDialects = ["mlir::LLVM::LLVMDialect"];
diff -Naur -x .git -x __pycache__ llvm-project.upstream/flang/lib/Frontend/FrontendActions.cpp llvm-project/flang/lib/Frontend/FrontendActions.cpp
--- llvm-project.upstream/flang/lib/Frontend/FrontendActions.cpp	2023-04-20 08:24:26.851638575 -0400
+++ llvm-project/flang/lib/Frontend/FrontendActions.cpp	2023-04-26 19:17:06.536865681 -0400
@@ -23,6 +23,7 @@
 #include "flang/Optimizer/Dialect/Support/KindMapping.h"
 #include "flang/Optimizer/Support/InitFIR.h"
 #include "flang/Optimizer/Support/Utils.h"
+#include "flang/Optimizer/Transforms/Passes.h"
 #include "flang/Parser/dump-parse-tree.h"
 #include "flang/Parser/parsing.h"
 #include "flang/Parser/provenance.h"
@@ -300,6 +301,12 @@
   pm.enableVerifier(/*verifyPasses=*/true);
   pm.addPass(std::make_unique<Fortran::lower::VerifierPass>());
 
+  // Add OpenMP-related passes
+  if (ci.getInvocation().getFrontendOpts().features.IsEnabled(
+          Fortran::common::LanguageFeature::OpenMP)) {
+    pm.addPass(fir::createCaptureImplicitlyDeclareTargetPass());
+  }
+
   if (mlir::failed(pm.run(*mlirModule))) {
     unsigned diagID = ci.getDiagnostics().getCustomDiagID(
         clang::DiagnosticsEngine::Error,
diff -Naur -x .git -x __pycache__ llvm-project.upstream/flang/lib/Lower/OpenMP.cpp llvm-project/flang/lib/Lower/OpenMP.cpp
--- llvm-project.upstream/flang/lib/Lower/OpenMP.cpp	2023-04-26 19:15:09.124964123 -0400
+++ llvm-project/flang/lib/Lower/OpenMP.cpp	2023-04-26 19:51:19.465597952 -0400
@@ -2262,6 +2262,143 @@
   converter.bindSymbol(sym, symThreadprivateExv);
 }
 
+void handleDeclareTarget(Fortran::lower::AbstractConverter &converter,
+                         Fortran::lower::pft::Evaluation &eval,
+                         const Fortran::parser::OpenMPDeclareTargetConstruct
+                             &declareTargetConstruct) {
+  std::vector<Fortran::semantics::Symbol> symbols;
+  auto findFuncAndVarSyms = [&](const Fortran::parser::OmpObjectList &objList) {
+    for (const auto &ompObject : objList.v) {
+      Fortran::common::visit(
+          Fortran::common::visitors{
+              [&](const Fortran::parser::Designator &designator) {
+                if (const Fortran::parser::Name *name =
+                        getDesignatorNameIfDataRef(designator)) {
+                  symbols.push_back(*name->symbol);
+                }
+              },
+              [&](const Fortran::parser::Name &name) {
+                symbols.push_back(*name.symbol);
+              }},
+          ompObject.u);
+    }
+  };
+
+  const auto &spec{std::get<Fortran::parser::OmpDeclareTargetSpecifier>(
+      declareTargetConstruct.t)};
+  auto mod = converter.getFirOpBuilder().getModule();
+  bool isOpenMPDevice = false;
+  if (auto offloadMod =
+          dyn_cast<mlir::omp::OffloadModuleInterface>(mod.getOperation())) {
+    isOpenMPDevice = offloadMod.getIsDevice();
+  }
+
+  // The default capture type
+  auto deviceType = Fortran::parser::OmpDeviceTypeClause::Type::Any;
+
+  if (const auto *objectList{
+          Fortran::parser::Unwrap<Fortran::parser::OmpObjectList>(spec.u)}) {
+    // Case: declare target(func, var1, var2)
+    findFuncAndVarSyms(*objectList);
+  } else if (const auto *clauseList{
+                 Fortran::parser::Unwrap<Fortran::parser::OmpClauseList>(
+                     spec.u)}) {
+    if (clauseList->v.empty()) {
+      // Case: declare target, implicit capture of function
+      symbols.push_back(eval.getOwningProcedure()->getSubprogramSymbol());
+    }
+
+    for (const auto &clause : clauseList->v) {
+      if (const auto *toClause{
+              std::get_if<Fortran::parser::OmpClause::To>(&clause.u)}) {
+        // Case: declare target to(func, var1, var2)...
+        findFuncAndVarSyms(toClause->v);
+      } else if (const auto *linkClause{
+                     std::get_if<Fortran::parser::OmpClause::Link>(
+                         &clause.u)}) {
+        // Case: declare target link(var1, var2)...
+        findFuncAndVarSyms(linkClause->v);
+      } else if (const auto *deviceClause{
+                     std::get_if<Fortran::parser::OmpClause::DeviceType>(
+                         &clause.u)}) {
+        // Case: declare target ... device_type(any | host | nohost)
+        deviceType = deviceClause->v.v;
+      }
+    }
+  }
+  // TODO for func:
+  // 1) handle link: done, can't use with function
+  // 2) handle to: done
+  // 3) the default case where neither are specified: done
+  // 4) nested implicit functions
+
+  // TODO for data:
+  // 1) lots... need to make test case first.
+
+  // might have to do the implicit capture further in during rewrite?
+  // Or if there is an end of module action
+  // or earlier during parsing...
+  // auto markAllFuncs = [&](mlir::func::FuncOp fOp) {
+  //   for (auto block = fOp.getBody().getBlocks().begin();
+  //        block != fOp.getBody().getBlocks().end(); ++block) {
+  //     llvm::errs() << "iterate on body \n";
+  //     for (auto op = block->begin(); op != block->end(); ++op) {
+  //       llvm::errs() << "iterate on op \n";
+  //       op->dump();
+  //       // probably needs to be a fir.CallOp, and then find the FuncOp
+  //       if (auto funcOp = mlir::dyn_cast<mlir::func::FuncOp>(op)) {
+  //         // markAllFuncs on func
+  //         // check if attr exists, if not apply it.
+  //         llvm::errs() << "markAllFuncs: " << funcOp->getName() << "\n";
+  //       }
+  //     }
+  //   }
+  // };
+
+  // mod.dump();
+
+  for (auto sym : symbols) {
+    auto *op = mod.lookupSymbol(converter.mangleName(sym));
+
+    // find any functions that are implicitly captured by this
+    // declare target and mark them with declare_target_type.
+    //
+    // This may be better to do at the parser/semantic level
+
+    // could be done inside of Bridge.cpp lowerFunc or lowerModule
+    // if (auto funcOp = mlir::dyn_cast<mlir::func::FuncOp>(op))
+    // markAllFuncs(funcOp);
+
+    // delete function early if we know it is going to be discared, if
+    // it is device_type any we keep it. This feels a little
+    // inconsistent as we can only remove things we know are unneeded
+    // at this stage, so we'll still end up with a module of mixed
+    // functions with some needing removal at a later stage in either
+    // case.
+    if ((deviceType == Fortran::parser::OmpDeviceTypeClause::Type::Nohost &&
+         !isOpenMPDevice) ||
+        (deviceType == Fortran::parser::OmpDeviceTypeClause::Type::Host &&
+         isOpenMPDevice)) {
+      op->dropAllUses();
+      op->dropAllReferences();
+      op->dropAllDefinedValueUses();
+      op->remove();
+    } else {
+      // Method 1: Remove function here if not desired and add adhoc
+      // attribute to the MLIR Funcs for special handling later
+      if (deviceType == Fortran::parser::OmpDeviceTypeClause::Type::Nohost) {
+        mlir::omp::OpenMPDialect::setDeclareTarget(op, "nohost");
+      } else if (deviceType ==
+                 Fortran::parser::OmpDeviceTypeClause::Type::Host) {
+        mlir::omp::OpenMPDialect::setDeclareTarget(op, "host");
+      } else if (deviceType ==
+                 Fortran::parser::OmpDeviceTypeClause::Type::Any) {
+        mlir::omp::OpenMPDialect::setDeclareTarget(op, "any");
+      }
+    }
+  }
+}
+
 void Fortran::lower::genOpenMPDeclarativeConstruct(
     Fortran::lower::AbstractConverter &converter,
     Fortran::lower::pft::Evaluation &eval,
@@ -2284,8 +2421,7 @@
           },
           [&](const Fortran::parser::OpenMPDeclareTargetConstruct
                   &declareTargetConstruct) {
-            TODO(converter.getCurrentLocation(),
-                 "OpenMPDeclareTargetConstruct");
+            handleDeclareTarget(converter, eval, declareTargetConstruct);
           },
           [&](const Fortran::parser::OpenMPRequiresConstruct
                   &requiresConstruct) {
diff -Naur -x .git -x __pycache__ llvm-project.upstream/flang/lib/Optimizer/Transforms/CMakeLists.txt llvm-project/flang/lib/Optimizer/Transforms/CMakeLists.txt
--- llvm-project.upstream/flang/lib/Optimizer/Transforms/CMakeLists.txt	2023-04-20 08:24:26.855638559 -0400
+++ llvm-project/flang/lib/Optimizer/Transforms/CMakeLists.txt	2023-04-26 19:17:06.540865678 -0400
@@ -15,9 +15,9 @@
   SimplifyIntrinsics.cpp
   AddDebugFoundation.cpp
   PolymorphicOpConversion.cpp
+  OMPCaptureImplicitDeclTar.cpp
   OpenACC/OpenACCDataOperandConversion.cpp
   LoopVersioning.cpp
-
   DEPENDS
   FIRDialect
   FIROptTransformsPassIncGen
diff -Naur -x .git -x __pycache__ llvm-project.upstream/flang/lib/Optimizer/Transforms/OMPCaptureImplicitDeclTar.cpp llvm-project/flang/lib/Optimizer/Transforms/OMPCaptureImplicitDeclTar.cpp
--- llvm-project.upstream/flang/lib/Optimizer/Transforms/OMPCaptureImplicitDeclTar.cpp	1969-12-31 19:00:00.000000000 -0500
+++ llvm-project/flang/lib/Optimizer/Transforms/OMPCaptureImplicitDeclTar.cpp	2023-04-26 19:17:06.540865678 -0400
@@ -0,0 +1,59 @@
+#include "flang/Optimizer/Dialect/FIRDialect.h"
+#include "flang/Optimizer/Dialect/FIROps.h"
+#include "flang/Optimizer/Dialect/FIRType.h"
+#include "flang/Optimizer/Transforms/Passes.h"
+#include "mlir/Dialect/Func/IR/FuncOps.h"
+#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
+#include "mlir/Dialect/OpenMP/OpenMPDialect.h"
+#include "mlir/IR/BuiltinDialect.h"
+#include "mlir/IR/Operation.h"
+#include "mlir/Pass/Pass.h"
+#include <mlir/IR/BuiltinOps.h>
+#include <mlir/IR/SymbolTable.h>
+#include <mlir/Support/LLVM.h>
+
+namespace fir {
+#define GEN_PASS_DEF_CAPTUREIMPLICITLYDECLARETARGETPASS
+#include "flang/Optimizer/Transforms/Passes.h.inc"
+} // namespace fir
+
+namespace {
+// TODO: Handle case where a function is marked twice by declare target and it's
+// two different target types
+class CaptureImplicitlyDeclareTargetPass
+    : public fir::impl::CaptureImplicitlyDeclareTargetPassBase<
+          CaptureImplicitlyDeclareTargetPass> {
+
+  // TODO: deal with finding the same function twice, with different device_type
+  // should be combined into Any, or Any should supersede what was before
+  void markNestedFuncs(mlir::func::FuncOp functionOp, mlir::ModuleOp moduleOp) {
+    llvm::errs() << "CurrentFuncName: " << functionOp.getName() << "\n";
+    for (auto callOp : functionOp.getOps<fir::CallOp>()) {
+      if (auto currFOp = moduleOp.lookupSymbol<mlir::func::FuncOp>(
+              callOp.getCallee().value())) {
+        mlir::omp::OpenMPDialect::setDeclareTarget(
+            currFOp,
+            mlir::omp::OpenMPDialect::getDeclareTargetDeviceType(functionOp));
+        markNestedFuncs(currFOp, moduleOp);
+      }
+    }
+  }
+
+  void runOnOperation() override {
+    mlir::ModuleOp moduleOp = getOperation();
+    for (auto functionOp : moduleOp.getOps<mlir::func::FuncOp>()) {
+      if (mlir::omp::OpenMPDialect::isDeclareTarget(functionOp)) {
+        markNestedFuncs(functionOp, moduleOp);
+      }
+    }
+  }
+};
+
+} // namespace
+
+namespace fir {
+std::unique_ptr<mlir::OperationPass<mlir::ModuleOp>>
+createCaptureImplicitlyDeclareTargetPass() {
+  return std::make_unique<CaptureImplicitlyDeclareTargetPass>();
+}
+} // namespace fir
diff -Naur -x .git -x __pycache__ llvm-project.upstream/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td llvm-project/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
--- llvm-project.upstream/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td	2023-04-26 19:15:09.444963854 -0400
+++ llvm-project/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td	2023-04-26 19:17:08.604863946 -0400
@@ -28,6 +28,13 @@
   let cppNamespace = "::mlir::omp";
   let dependentDialects = ["::mlir::LLVM::LLVMDialect"];
   let useDefaultAttributePrinterParser = 1;
+
+  let extraClassDeclaration = [{
+    // @@@AG: Make this into a well defined attribute if we maintain its use
+    static void setDeclareTarget(Operation *func, StringRef deviceType);
+    static bool isDeclareTarget(Operation *func);
+    static StringRef getDeclareTargetDeviceType(Operation *func);
+  }];
 }
 
 // OmpCommon requires definition of OpenACC_Dialect.
diff -Naur -x .git -x __pycache__ llvm-project.upstream/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp llvm-project/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
--- llvm-project.upstream/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp	2023-04-20 08:24:27.415636370 -0400
+++ llvm-project/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp	2023-04-26 19:17:06.820865442 -0400
@@ -1441,6 +1441,27 @@
   return success();
 }
 
+//===----------------------------------------------------------------------===//
+// OpenMPDialect helper functions
+//===----------------------------------------------------------------------===//
+
+void OpenMPDialect::setDeclareTarget(Operation *func, StringRef deviceType) {
+  func->setAttr("omp.declare_target_type",
+                mlir::StringAttr::get(func->getContext(), deviceType));
+}
+
+bool OpenMPDialect::isDeclareTarget(Operation *func) {
+  return func->hasAttr("omp.declare_target_type");
+}
+
+StringRef OpenMPDialect::getDeclareTargetDeviceType(Operation *func) {
+  if (mlir::Attribute declTar = func->getAttr("omp.declare_target_type")) {
+    if (declTar.isa<mlir::StringAttr>())
+      return declTar.cast<mlir::StringAttr>().getValue();
+  }
+  return {};
+}
+
 #define GET_ATTRDEF_CLASSES
 #include "mlir/Dialect/OpenMP/OpenMPOpsAttributes.cpp.inc"
 
diff -Naur -x .git -x __pycache__ llvm-project.upstream/mlir/lib/Target/LLVMIR/CMakeLists.txt llvm-project/mlir/lib/Target/LLVMIR/CMakeLists.txt
--- llvm-project.upstream/mlir/lib/Target/LLVMIR/CMakeLists.txt	2023-04-26 19:15:09.468963835 -0400
+++ llvm-project/mlir/lib/Target/LLVMIR/CMakeLists.txt	2023-04-26 19:17:06.824865440 -0400
@@ -57,6 +57,7 @@
   MLIROpenACCToLLVMIRTranslation
   MLIROpenMPToLLVMIRTranslation
   MLIRROCDLToLLVMIRTranslation
+  MLIROpenMPDialect
   )
 
 add_mlir_translation_library(MLIRTargetLLVMIRImport
@@ -84,4 +85,5 @@
 
   LINK_LIBS PUBLIC
   MLIRLLVMIRToLLVMTranslation
+  MLIROpenMPDialect
   )
diff -Naur -x .git -x __pycache__ llvm-project.upstream/mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp llvm-project/mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp
--- llvm-project.upstream/mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp	2023-04-26 19:15:09.468963835 -0400
+++ llvm-project/mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp	2023-04-26 19:19:55.736723674 -0400
@@ -1818,6 +1818,16 @@
         return convertOmpTargetData(op, builder, moduleTranslation);
       })
       .Case([&](omp::TargetOp) {
+        bool isDevice = false;
+        if (auto offloadMod = dyn_cast<mlir::omp::OffloadModuleInterface>(
+                op->getParentOfType<mlir::ModuleOp>().getOperation())) {
+          isDevice = offloadMod.getIsDevice();
+        }
+
+        printf("======== Target Op detected with isDevice=%d\n", isDevice);
+        op->dump();
+        // Placeholder for Jan's convertOmpTarget(*op, builder,
+        // moduleTranslation);
         return convertOmpTarget(*op, builder, moduleTranslation);
       })
       .Default([&](Operation *inst) {
diff -Naur -x .git -x __pycache__ llvm-project.upstream/mlir/lib/Target/LLVMIR/ModuleTranslation.cpp llvm-project/mlir/lib/Target/LLVMIR/ModuleTranslation.cpp
--- llvm-project.upstream/mlir/lib/Target/LLVMIR/ModuleTranslation.cpp	2023-04-26 19:15:09.472963831 -0400
+++ llvm-project/mlir/lib/Target/LLVMIR/ModuleTranslation.cpp	2023-04-26 19:17:08.596863953 -0400
@@ -1007,11 +1007,29 @@
 
 LogicalResult ModuleTranslation::convertFunctions() {
   // Convert functions.
+
+  bool isDevice = false;
+  if (auto offloadMod =
+          dyn_cast<mlir::omp::OffloadModuleInterface>(mlirModule)) {
+    isDevice = offloadMod.getIsDevice();
+  }
+
   for (auto function : getModuleBody(mlirModule).getOps<LLVMFuncOp>()) {
     // Ignore external functions.
     if (function.isExternal())
       continue;
 
+    // FIXME: Must convert declare target functions on device pass.
+    //        We need a way to identify that function was defined or
+    //        declared inside declare target.
+    //        For now, we assume no declare target functions.
+    //        Target regions will have there own kernels generated.
+    printf("  FFFF Function name %s\n", function.getName().str().c_str());
+    bool isDeclareTargetFunction =
+        mlir::omp::OpenMPDialect::isDeclareTarget(function);
+    if (isDevice && !isDeclareTargetFunction)
+      continue;
+
     if (failed(convertOneFunction(function)))
       return failure();
   }
