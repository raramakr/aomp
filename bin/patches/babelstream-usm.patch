diff --git a/src/hip/HIPStream.cpp b/src/hip/HIPStream.cpp
index fbc3b71..64ee5d9 100644
--- a/src/hip/HIPStream.cpp
+++ b/src/hip/HIPStream.cpp
@@ -11,6 +11,10 @@
 #define TBSIZE 1024
 #define DOT_NUM_BLOCKS 256
 
+#ifndef ALIGNMENT
+#define ALIGNMENT (2*1024*1024) // 2MB
+#endif
+
 void check_error(void)
 {
   hipError_t err = hipGetLastError();
@@ -57,13 +61,27 @@ HIPStream<T>::HIPStream(const int ARRAY_SIZE, const int device_index)
   if (props.totalGlobalMem < 3*ARRAY_SIZE*sizeof(T))
     throw std::runtime_error("Device does not have enough memory for all 3 buffers");
 
-  // Create device buffers
-  hipMalloc(&d_a, ARRAY_SIZE*sizeof(T));
-  check_error();
-  hipMalloc(&d_b, ARRAY_SIZE*sizeof(T));
-  check_error();
-  hipMalloc(&d_c, ARRAY_SIZE*sizeof(T));
-  check_error();
+  hipUMRun = false;
+  auto *hipUMVar = getenv("HIP_UM");
+  if (hipUMVar) {
+    auto hipUMVarVal = std::stoi(hipUMVar);
+    if (hipUMVarVal > 0) hipUMRun = true;
+  }
+
+  if (!hipUMRun) {
+    // Create device buffers
+    hipMalloc(&d_a, ARRAY_SIZE*sizeof(T));
+    check_error();
+    hipMalloc(&d_b, ARRAY_SIZE*sizeof(T));
+    check_error();
+    hipMalloc(&d_c, ARRAY_SIZE*sizeof(T));
+    check_error();
+  } else {
+    // Allocate on the host
+    d_a = (T*)aligned_alloc(ALIGNMENT, sizeof(T)*array_size);
+    d_b = (T*)aligned_alloc(ALIGNMENT, sizeof(T)*array_size);
+    d_c = (T*)aligned_alloc(ALIGNMENT, sizeof(T)*array_size);
+  }    
   hipMalloc(&d_sum, DOT_NUM_BLOCKS*sizeof(T));
   check_error();
 }
@@ -74,12 +92,18 @@ HIPStream<T>::~HIPStream()
 {
   free(sums);
 
-  hipFree(d_a);
-  check_error();
-  hipFree(d_b);
-  check_error();
-  hipFree(d_c);
-  check_error();
+  if (!hipUMRun) {
+    hipFree(d_a);
+    check_error();
+    hipFree(d_b);
+    check_error();
+    hipFree(d_c);
+    check_error();
+  } else {
+    free(d_a);
+    free(d_b);
+    free(d_c);
+  }
   hipFree(d_sum);
   check_error();
 }
@@ -106,13 +130,19 @@ void HIPStream<T>::init_arrays(T initA, T initB, T initC)
 template <class T>
 void HIPStream<T>::read_arrays(std::vector<T>& a, std::vector<T>& b, std::vector<T>& c)
 {
-  // Copy device memory to host
-  hipMemcpy(a.data(), d_a, a.size()*sizeof(T), hipMemcpyDeviceToHost);
-  check_error();
-  hipMemcpy(b.data(), d_b, b.size()*sizeof(T), hipMemcpyDeviceToHost);
-  check_error();
-  hipMemcpy(c.data(), d_c, c.size()*sizeof(T), hipMemcpyDeviceToHost);
-  check_error();
+  if (!hipUMRun) {
+    // Copy device memory to host
+    hipMemcpy(a.data(), d_a, a.size()*sizeof(T), hipMemcpyDeviceToHost);
+    check_error();
+    hipMemcpy(b.data(), d_b, b.size()*sizeof(T), hipMemcpyDeviceToHost);
+    check_error();
+    hipMemcpy(c.data(), d_c, c.size()*sizeof(T), hipMemcpyDeviceToHost);
+    check_error();
+  } else {
+    memcpy(a.data(), d_a, a.size()*sizeof(T));
+    memcpy(b.data(), d_b, b.size()*sizeof(T));
+    memcpy(c.data(), d_c, c.size()*sizeof(T));
+  }
 }
 
 
diff --git a/src/hip/HIPStream.h b/src/hip/HIPStream.h
index 44a2893..e0ac064 100644
--- a/src/hip/HIPStream.h
+++ b/src/hip/HIPStream.h
@@ -30,7 +30,7 @@ class HIPStream : public Stream<T>
     T *d_b;
     T *d_c;
     T *d_sum;
-
+    bool hipUMRun;
 
   public:
 
@@ -46,5 +46,4 @@ class HIPStream : public Stream<T>
 
     virtual void init_arrays(T initA, T initB, T initC) override;
     virtual void read_arrays(std::vector<T>& a, std::vector<T>& b, std::vector<T>& c) override;
-
 };
diff --git a/src/main.cpp b/src/main.cpp
index 3035da0..cbfc459 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -208,9 +208,8 @@ void run()
     else if (selection == Benchmark::Triad)
     {
       std::cout << "Running triad " << num_times << " times" << std::endl;
-      std::cout << "Number of elements: " << ARRAY_SIZE << std::endl;
     }
-
+    std::cout << "Number of elements: " << ARRAY_SIZE << std::endl;
 
     if (sizeof(T) == sizeof(float))
       std::cout << "Precision: float" << std::endl;
diff --git a/src/omp/OMPStream.h b/src/omp/OMPStream.h
index 5a5622f..446a3a9 100644
--- a/src/omp/OMPStream.h
+++ b/src/omp/OMPStream.h
@@ -7,6 +7,10 @@
 
 #pragma once
 
+#ifdef OMP_USM
+#pragma omp requires unified_shared_memory
+#endif
+
 #include <iostream>
 #include <stdexcept>
